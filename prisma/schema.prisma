generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    userId String @id @unique @default(uuid()) @map("user_id")

    email              String  @unique
    hashedPassword     String  @map("hashed_password")
    hashedRefreshToken String? @map("hashed_refresh_token")

    confirmationId String? @map("confirmation_id")
    confirmed      Boolean @default(false)

    roles Role[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    lastLogin DateTime @default(now()) @map("last_login")

    Profile     Profile?
    UserDetails UserDetails?
    Item        Item[]
    Report      Report[]
}

model UserDetails {
    userId String @id @unique @map("user_id")

    firstName String @map("first_name")
    lastName  String @map("last_name")

    User User @relation(fields: [userId], references: [userId])
}

model Profile {
    userId String @id @unique @map("user_id")

    displayName   String  @map("display_name")
    avatarUrl     String? @map("avatar_url")
    socialNetwork String? @map("social_network")

    User User @relation(fields: [userId], references: [userId])
}

model Item {
    gameId     String @id @unique @default(uuid()) @map("game_id")
    platformId String @map("platform_id")

    sellerId    String @map("seller_id")
    sellerPrice Int    @map("seller_price")

    title    String
    edition  String @default("Standard")
    region   Region
    imageUrl String @map("image_url")

    hasGame   Boolean @default(false) @map("has_game")
    stateGame State?  @map("state_game")

    hasBox   Boolean @default(false) @map("has_box")
    stateBox State?  @map("state_box")

    hasManual   Boolean @default(false) @map("has_manual")
    stateManual State?  @map("state_manual")

    hasCover   Boolean @default(false) @map("has_cover")
    stateCover State?  @map("state_cover")

    extraContent String[] @map("extra_content")

    isVisible Boolean @default(true)
    isSold    Boolean @default(false)

    Platform Platform @relation(fields: [platformId], references: [platformId])
    Seller   User     @relation(fields: [sellerId], references: [userId])

    views     Int      @default(0)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    Report Report[]
}

model Report {
    reportId String @id @unique @default(uuid()) @map("report_id")

    gameId String @map("game_id")
    userId String @map("user_id")

    reason  String
    message String?

    createdAt DateTime @default(now()) @map("created_at")
    
    Item Item @relation(fields: [gameId], references: [gameId])
    User User @relation(fields: [userId], references: [userId])
}

model Platform {
    platformId String @id @unique @default(uuid()) @map("platform_id")

    name         String       @unique
    releaseDate  DateTime     @map("release_date")
    manufacturer Manufacturer
    generation   Int

    logoUrl String? @map("logo_url")

    Items Item[]
}

enum Role {
    ADMIN
    USER
    SELLER
}

enum State {
    MINT
    GOOD
    AVERAGE
    BAD
    BROKEN
}

enum Manufacturer {
    SONY
    MICROSOFT
    NINTENDO
    SEGA
    ATARI
    PC
    OTHER
}

enum Region {
    PAL
    NTSC
    NTSC_J
}
